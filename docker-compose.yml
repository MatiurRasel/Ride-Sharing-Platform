# services define individual containers and their configurations
services:
  
# Keycloak container
  keycloak:
    restart: unless-stopped
    image: quay.io/keycloak/keycloak:22.0.5
    container_name: keycloak
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PASSWORD}
      # KC_HTTPS_CERTIFICATE_FILE: /opt/keycloak/conf/server.crt.pem
      # KC_HTTPS_CERTIFICATE_KEY_FILE: /opt/keycloak/conf/server.key.pem
      KC_HEALTH_ENABLED: true
      KC_METRICS_ENABLED: true
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_DB: postgres
      KC_DB_URL_HOST: keycloak-postgres
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
      # KC_SMTP_SERVER_EMAIL: ${KC_SMTP_SERVER_EMAIL}
      # KC_SMTP_SERVER_HOST: ${KC_SMTP_SERVER_HOST}
      # KC_SMTP_SERVER_PORT: ${KC_SMTP_SERVER_PORT}
      # KC_SMTP_SERVER_USER: ${KC_SMTP_SERVER_USER}
      # KC_SMTP_SERVER_PASS: ${KC_SMTP_SERVER_PASS}
    ports:
      - "9990:8080" # keycloak disables http port on production
      - "9991:8443"
    volumes:
      # - ${KC_HTTPS_CERTIFICATE_FILE}:/opt/keycloak/conf/server.crt.pem
      # - ${KC_HTTPS_CERTIFICATE_KEY_FILE}:/opt/keycloak/conf/server.key.pem
      - ./keycloak/realm-export.json:/opt/keycloak/data/import/realm.json
    networks:
      - globalnet
    command: ["start-dev", "--import-realm"]
    depends_on:
      - keycloak-postgres

  # Keycloak database container
  keycloak-postgres:
    image: postgres:16
    container_name: keycloak-postgres
    restart: unless-stopped
    volumes: 
      - ~/ridesharing/userdata-backup:/var/lib/postgresql/data # user data will be recovered from this location on container destroy and re-create
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: ${KC_POSTGRES_USER}
      POSTGRES_PASSWORD: ${KC_POSTGRES_PASS}

    # ports:
    #   - "9992:5432" # no need to expose this port as since keycloak will access it internally
    networks:
      - globalnet
      
  
  
  # # api gateway / reverse proxy
  # api-gateway:
  #   image: api-gateway
  #   container_name: api-gateway
  #   build:
  #     context: .
  #     dockerfile: src/Common/RideSharing.APIGateway/Dockerfile
  #   ports:
  #     - "5000:8080"
  #     - "7000:8081"
  #   networks:
  #     - globalnet
  #   restart: unless-stopped


  # # db for ridesharing platform
  # ride-sharing-api-db:
  #   image: "mcr.microsoft.com/mssql/server:2022-latest"
  #   container_name: ride-sharing-api-db
  #   ports: # not actually needed, because the two services are on the same network
  #     - "6002:1433"
  #   environment:
  #     - ACCEPT_EULA=y
  #     - SA_PASSWORD=123456Aa@
  #   networks:
  #     - globalnet
  #   restart: unless-stopped

  # # admin api (contains all generic crud endpoints)
  # ride-sharing-api:
  #   image: ride-sharing-api
  #   container_name: ride-sharing-api
  #   build:
  #     context: .
  #     dockerfile: src/RideSharingService/RideSharing.API/Dockerfile
  #   ports:
  #     - "5002:8080"
  #     - "7002:8081"
  #   networks:
  #     - globalnet
  #   restart: unless-stopped
  #   depends_on:
  #     - ride-sharing-api-db

  # # customer api (riders & customers only)
  # ride-sharing-customer-api:
  #   image: ride-sharing-customer-api
  #   container_name: ride-sharing-customer-api
  #   build:
  #     context: .
  #     dockerfile: src/RideSharingService/RideSharing.CustomerAPI/Dockerfile
  #   ports:
  #     - "5003:8080"
  #     - "7003:8081"
  #   networks:
  #     - globalnet
  #   restart: unless-stopped
  #   depends_on:
  #     - ride-sharing-api-db


# volumes are a physical areas of disk space shared between the host and the containers
# volumes:


# networks define the communication rules between containers, and between a container and the host
networks:
  keycloak-local: # network for keycloak communication
  globalnet: # network for api communications
